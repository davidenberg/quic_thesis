
    
@Online{aaltolib,
  author  = {{Aalto University Learning Centre}}, % extra braces because firstinit is true in document
  journal = {NPSG.UW - Natural Phenomena Simulation Group at University of Waterloo},
  title   = {Citation Guide: Making a bibliography},
  url     = {https://libguides.aalto.fi/c.php?g=410674&p=2797572},
  urldate = {2021-07-14}
}


@Book{Bringhurst,
  author    = {Bringhurst, R.},
  publisher = {Point Roberts, WA: Hartley \& Marks},
  title     = {Horizontal Motion. The Elements of Typographic Style},
  year      = {1992},
  pages = {26, 25--36},
  url = {https://smallpressblog.files.wordpress.com/2017/11/bringhurstelementsselections1.pdf}
}
    
   
@article{Dyson, 
    title=      {The Effects of Line Length and Method of Movement on Patterns of Reading from Screen}, 
    volume=     {2}, 
    number=     {2}, 
    journal=    {Visible Language}, 
    author=     {Dyson, M. C. and Kipping, G. J.}, 
    year=       {1998}, 
    month=      {3}, 
    pages=      {150--181}}

@Online{Wikilinelength,
    title =     {Line length},
    author =    {{Wikipedia contributors}},
    journal =   {{Wikipedia: The Free Encyclopedia}, Wikimedia Foundation, Inc.},
    date =   {2004-07-22},
	url = {https://en.wikipedia.org/w/index.php?title=Line_length&oldid=997524503},
	urldate = {2021-05-07}
}

@misc{rfc768,
    series =    {Request for Comments},
    number =    768,
    howpublished =  {RFC 768},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC0768},
    url =       {https://www.rfc-editor.org/info/rfc768},
    author =    {},
    title =     {{User Datagram Protocol}},
    pagetotal = 3,
    year =      1980,
    month =     aug,
    abstract =  {},
}

@misc{rfc793,
    series =    {Request for Comments},
    number =    793,
    howpublished =  {RFC 793},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC0793},
    url =       {https://www.rfc-editor.org/info/rfc793},
    author =    {},
    title =     {{Transmission Control Protocol}},
    pagetotal = 91,
    year =      1981,
    month =     sep,
    abstract =  {},
}

@misc{rfc791,
    series =    {Request for Comments},
    number =    791,
    howpublished =  {RFC 791},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC0791},
    url =       {https://www.rfc-editor.org/info/rfc791},
    author =    {},
    title =     {{Internet Protocol}},
    pagetotal = 51,
    year =      1981,
    month =     sep,
    abstract =  {},
}

@misc{rfc8684,
    series =    {Request for Comments},
    number =    8684,
    howpublished =  {RFC 8684},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8684},
    url =       {https://www.rfc-editor.org/info/rfc8684},
    author =    {Alan Ford and Costin Raiciu and Mark J. Handley and Olivier Bonaventure and Christoph Paasch},
    title =     {{TCP Extensions for Multipath Operation with Multiple Addresses}},
    pagetotal = 68,
    year =      2020,
    month =     mar,
    abstract =  {TCP/IP communication is currently restricted to a single path per connection, yet multiple paths often exist between peers. The simultaneous use of these multiple paths for a TCP/IP session would improve resource usage within the network and thus improve user experience through higher throughput and improved resilience to network failure. Multipath TCP provides the ability to simultaneously use multiple paths between peers. This document presents a set of extensions to traditional TCP to support multipath operation. The protocol offers the same type of service to applications as TCP (i.e., a reliable bytestream), and it provides the components necessary to establish and use multiple TCP flows across potentially disjoint paths. This document specifies v1 of Multipath TCP, obsoleting v0 as specified in RFC 6824, through clarifications and modifications primarily driven by deployment experience.},
}

@BOOK{compute_rnetworking,
  title     = "Computer networking: A top-down approach, global edition",
  author    = "Kurose, James and Ross, Keith",
  publisher = "Pearson Education",
  edition   =  8,
  month     =  jun,
  year      =  2021,
  address   = "London, England",
  language  = "en"
}

@inproceedings{quic_transport_protocol_design,
author = {Langley, Adam and Riddoch, Alistair and Wilk, Alyssa and Vicente, Antonio and Krasic, Charles and Zhang, Dan and Yang, Fan and Kouranov, Fedor and Swett, Ian and Iyengar, Janardhan and Bailey, Jeff and Dorfman, Jeremy and Roskind, Jim and Kulik, Joanna and Westin, Patrik and Tenneti, Raman and Shade, Robbie and Hamilton, Ryan and Vasiliev, Victor and Chang, Wan-Teh and Shi, Zhongyi},
title = {The QUIC Transport Protocol: Design and Internet-Scale Deployment},
year = {2017},
isbn = {9781450346535},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3098822.3098842},
doi = {10.1145/3098822.3098842},
abstract = {We present our experience with QUIC, an encrypted, multiplexed, and low-latency transport protocol designed from the ground up to improve transport performance for HTTPS traffic and to enable rapid deployment and continued evolution of transport mechanisms. QUIC has been globally deployed at Google on thousands of servers and is used to serve traffic to a range of clients including a widely-used web browser (Chrome) and a popular mobile video streaming app (YouTube). We estimate that 7\% of Internet traffic is now QUIC. We describe our motivations for developing a new transport, the principles that guided our design, the Internet-scale process that we used to perform iterative experiments on QUIC, performance improvements seen by our various services, and our experience deploying QUIC globally. We also share lessons about transport design and the Internet ecosystem that we learned from our deployment.},
booktitle = {Proceedings of the Conference of the ACM Special Interest Group on Data Communication},
pages = {183–196},
numpages = {14},
location = {Los Angeles, CA, USA},
series = {SIGCOMM '17}
}

@misc{rfc2818,
    series =    {Request for Comments},
    number =    2818,
    howpublished =  {RFC 2818},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC2818},
    url =       {https://www.rfc-editor.org/info/rfc2818},
    author =    {Eric Rescorla},
    title =     {{HTTP Over TLS}},
    pagetotal = 7,
    year =      2000,
    month =     may,
    abstract =  {This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet. This memo provides information for the Internet community.},
}

@misc{rfc9000,
    series =    {Request for Comments},
    number =    9000,
    howpublished =  {RFC 9000},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9000},
    url =       {https://www.rfc-editor.org/info/rfc9000},
    author =    {Jana Iyengar and Martin Thomson},
    title =     {{QUIC: A UDP-Based Multiplexed and Secure Transport}},
    pagetotal = 151,
    year =      2021,
    month =     may,
    abstract =  {This document defines the core of the QUIC transport protocol. QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances. Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.},
}

@INPROCEEDINGS{hol_tcp,
  author={Scharf, Michael and Kiesel, Sebastian},
  booktitle={IEEE Globecom 2006}, 
  title={NXG03-5: Head-of-line Blocking in TCP and SCTP: Analysis and Measurements}, 
  year={2006},
  volume={},
  number={},
  pages={1-5},
  keywords={TCPIP;Transport protocols;Next generation networking;Analytical models;Operating systems;Delay effects;Protection;IP networks;Middleboxes;Communication networks},
  doi={10.1109/GLOCOM.2006.333}}

@misc{rfc9113,
    series =    {Request for Comments},
    number =    9113,
    howpublished =  {RFC 9113},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9113},
    url =       {https://www.rfc-editor.org/info/rfc9113},
    author =    {Martin Thomson and Cory Benfield},
    title =     {{HTTP/2}},
    pagetotal = 78,
    year =      2022,
    month =     jun,
    abstract =  {This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced latency by introducing field compression and allowing multiple concurrent exchanges on the same connection. This document obsoletes RFCs 7540 and 8740.},
}

@INPROCEEDINGS{http2_vs_1,
  author={de Saxcé, Hugues and Oprescu, Iuniana and Chen, Yiping},
  booktitle={2015 IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)}, 
  title={Is HTTP/2 really faster than HTTP/1.1?}, 
  year={2015},
  volume={},
  number={},
  pages={293-299},
  keywords={Servers;Web pages;Internet;Protocols;Packet loss;Multiplexing},
  doi={10.1109/INFCOMW.2015.7179400}}

@misc{rfc8446,
    series =    {Request for Comments},
    number =    8446,
    howpublished =  {RFC 8446},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8446},
    url =       {https://www.rfc-editor.org/info/rfc8446},
    author =    {Eric Rescorla},
    title =     {{The Transport Layer Security (TLS) Protocol Version 1.3}},
    pagetotal = 160,
    year =      2018,
    month =     aug,
    abstract =  {This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery. This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.},
}

@INPROCEEDINGS{Ossification,
  author={Edeline, Korian and Donnet, Benoit},
  booktitle={2019 Network Traffic Measurement and Analysis Conference (TMA)}, 
  title={A Bottom-Up Investigation of the Transport-Layer Ossification}, 
  year={2019},
  volume={},
  number={},
  pages={169-176},
  keywords={Middleboxes;Strips;IP networks;Transport protocols;Technological innovation},
  doi={10.23919/TMA.2019.8784690}}

@misc{googleQUICDesign,
	author = {Jim Roskind},
	title = {{Q}{U}{I}{C}: {D}esign {D}ocument and {S}pecification {R}ationale --- docs.google.com},
	howpublished = {\url{https://docs.google.com/document/d/1RNHkx_VvKWyWg6Lr8SZ-saqsQx7rFV-ev2jRFUoVD34/edit?usp=sharing}},
	year = {},
	note = {[Accessed 14-08-2025]},
}

@misc{ietfWhatsHappening,
	author = {},
	title = {{W}hat's {H}appening with {Q}{U}{I}{C} --- ietf.org},
	howpublished = {\url{https://www.ietf.org/blog/whats-happening-quic/}},
	year = {},
	note = {[Accessed 14-08-2025]},
}

@misc{rfc9001,
    series =    {Request for Comments},
    number =    9001,
    howpublished =  {RFC 9001},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9001},
    url =       {https://www.rfc-editor.org/info/rfc9001},
    author =    {Martin Thomson and Sean Turner},
    title =     {{Using TLS to Secure QUIC}},
    pagetotal = 52,
    year =      2021,
    month =     may,
    abstract =  {This document describes how Transport Layer Security (TLS) is used to secure QUIC.},
}

@misc{rfc9002,
    series =    {Request for Comments},
    number =    9002,
    howpublished =  {RFC 9002},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9002},
    url =       {https://www.rfc-editor.org/info/rfc9002},
    author =    {Jana Iyengar and Ian Swett},
    title =     {{QUIC Loss Detection and Congestion Control}},
    pagetotal = 42,
    year =      2021,
    month =     may,
    abstract =  {This document describes loss detection and congestion control mechanisms for QUIC.},
}

@misc{rfc8999,
    series =    {Request for Comments},
    number =    8999,
    howpublished =  {RFC 8999},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8999},
    url =       {https://www.rfc-editor.org/info/rfc8999},
    author =    {Martin Thomson},
    title =     {{Version-Independent Properties of QUIC}},
    pagetotal = 9,
    year =      2021,
    month =     may,
    abstract =  {This document defines the properties of the QUIC transport protocol that are common to all versions of the protocol.},
}

@misc{chromium_quic,
	author = {},
	title = {{Q}{U}{I}{C}, a multiplexed transport over {U}{D}{P} --- chromium.org},
	howpublished = {\url{https://www.chromium.org/quic/}},
	year = {},
	note = {[Accessed 14-08-2025]},
}

@misc{safari_quic,
	author = {},
	title = {{E}xamining {H}{T}{T}{P}/3 usage one year on --- blog.cloudflare.com},
	howpublished = {\url{https://blog.cloudflare.com/http3-usage-one-year-on/}},
	year = {},
	note = {[Accessed 14-08-2025]},
}

@misc{firefox_quic,
	author = {},
	title = {{H}ow to enable {H}{T}{T}{P}/3 support in {F}irefox},
	howpublished = {\url{https://www.ghacks.net/2020/07/01/how-to-enable-http-3-support-in-firefox/}},
	year = {},
	note = {[Accessed 14-08-2025]},
}

@misc{rfc9114,
    series =    {Request for Comments},
    number =    9114,
    howpublished =  {RFC 9114},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9114},
    url =       {https://www.rfc-editor.org/info/rfc9114},
    author =    {Mike Bishop},
    title =     {{HTTP/3}},
    pagetotal = 57,
    year =      2022,
    month =     jun,
    abstract =  {The QUIC transport protocol has several features that are desirable in a transport for HTTP, such as stream multiplexing, per-stream flow control, and low-latency connection establishment. This document describes a mapping of HTTP semantics over QUIC. This document also identifies HTTP/2 features that are subsumed by QUIC and describes how HTTP/2 extensions can be ported to HTTP/3.},
}

@misc{rfc9250,
    series =    {Request for Comments},
    number =    9250,
    howpublished =  {RFC 9250},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9250},
    url =       {https://www.rfc-editor.org/info/rfc9250},
    author =    {Christian Huitema and Sara Dickinson and Allison Mankin},
    title =     {{DNS over Dedicated QUIC Connections}},
    pagetotal = 27,
    year =      2022,
    month =     may,
    abstract =  {This document describes the use of QUIC to provide transport confidentiality for DNS. The encryption provided by QUIC has similar properties to those provided by TLS, while QUIC transport eliminates the head-of-line blocking issues inherent with TCP and provides more efficient packet-loss recovery than UDP. DNS over QUIC (DoQ) has privacy properties similar to DNS over TLS (DoT) specified in RFC 7858, and latency characteristics similar to classic DNS over UDP. This specification describes the use of DoQ as a general-purpose transport for DNS and includes the use of DoQ for stub to recursive, recursive to authoritative, and zone transfer scenarios.},
}

@misc{rfc6582,
    series =    {Request for Comments},
    number =    6582,
    howpublished =  {RFC 6582},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6582},
    url =       {https://www.rfc-editor.org/info/rfc6582},
    author =    {Andrei Gurtov and Tom Henderson and Sally Floyd and Yoshifumi Nishida},
    title =     {{The NewReno Modification to TCP's Fast Recovery Algorithm}},
    pagetotal = 16,
    year =      2012,
    month =     apr,
    abstract =  {RFC 5681 documents the following four intertwined TCP congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery. RFC 5681 explicitly allows certain modifications of these algorithms, including modifications that use the TCP Selective Acknowledgment (SACK) option (RFC 2883), and modifications that respond to "partial acknowledgments" (ACKs that cover new data, but not all the data outstanding when loss was detected) in the absence of SACK. This document describes a specific algorithm for responding to partial acknowledgments, referred to as "NewReno". This response to partial acknowledgments was first proposed by Janey Hoe. This document obsoletes RFC 3782. {[}STANDARDS-TRACK{]}},
}

@misc{rfc8085,
    series =    {Request for Comments},
    number =    8085,
    howpublished =  {RFC 8085},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8085},
    url =       {https://www.rfc-editor.org/info/rfc8085},
    author =    {Lars Eggert and Gorry Fairhurst and Greg Shepherd},
    title =     {{UDP Usage Guidelines}},
    pagetotal = 55,
    year =      2017,
    month =     mar,
    abstract =  {The User Datagram Protocol (UDP) provides a minimal message-passing transport that has no inherent congestion control mechanisms. This document provides guidelines on the use of UDP for the designers of applications, tunnels, and other protocols that use UDP. Congestion control guidelines are a primary focus, but the document also provides guidance on other topics, including message sizes, reliability, checksums, middlebox traversal, the use of Explicit Congestion Notification (ECN), Differentiated Services Code Points (DSCPs), and ports. Because congestion control is critical to the stable operation of the Internet, applications and other protocols that choose to use UDP as an Internet transport must employ mechanisms to prevent congestion collapse and to establish some degree of fairness with concurrent traffic. They may also need to implement additional mechanisms, depending on how they use UDP. Some guidance is also applicable to the design of other protocols (e.g., protocols layered directly on IP or via IP-based tunnels), especially when these protocols do not themselves provide congestion control. This document obsoletes RFC 5405 and adds guidelines for multicast UDP usage.},
}

@Online{smb2,
  author  = {{Microsoft}},
  journal = {Microsoft Learn},
  title   = {[MS-SMB2]: Server Message Block (SMB) Protocol Versions 2 and 3},
  url     = {https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/5606ad47-5ee0-437a-817e-70c366052962},
  urldate = {2025-08-26}
}

@INPROCEEDINGS{quic_better_for_what,
  author={Cook, Sarah and Mathieu, Bertrand and Truong, Patrick and Hamchaoui, Isabelle},
  booktitle={2017 IEEE International Conference on Communications (ICC)}, 
  title={QUIC: Better for what and for whom?}, 
  year={2017},
  volume={},
  number={},
  pages={1-6},
  keywords={Protocols;Servers;Google;YouTube;Delays;Internet;Loss measurement},
  doi={10.1109/ICC.2017.7997281}}

@INPROCEEDINGS{quic_and_tcp_performance,
  author={Nepomuceno, Késsia and Oliveira, Igor Nogueira de and Aschoff, Rafael Roque and Bezerra, Daniel and Ito, Maria Silvia and Melo, Wesley and Sadok, Djamel and Szabó, Géza},
  booktitle={2018 IEEE Symposium on Computers and Communications (ISCC)}, 
  title={QUIC and TCP: A Performance Evaluation}, 
  year={2018},
  volume={},
  number={},
  pages={00045-00051},
  keywords={Internet;Web pages;Google;Servers;Transport protocols;Packet loss;QUIC;TCP;Page Load Time},
  doi={10.1109/ISCC.2018.8538687}}

@ARTICLE{evaluating_quic_perf,
  author={Shreedhar, Tanya and Panda, Rohit and Podanev, Sergey and Bajpai, Vaibhav},
  journal={IEEE Transactions on Network and Service Management}, 
  title={Evaluating QUIC Performance Over Web, Cloud Storage, and Video Workloads}, 
  year={2022},
  volume={19},
  number={2},
  pages={1366-1381},
  keywords={Internet;Protocols;Streaming media;Cloud computing;Throughput;Servers;Middleboxes;Content delivery networks (CDN);transmission control protocol (TCP);transport layer security (TLS);QUIC;internet engineering task force (IETF);application workloads},
  doi={10.1109/TNSM.2021.3134562}}

@techreport{bitag_port_blocking,
  author       = {{Broadband Internet Technical Advisory Group (BITAG)}},
  title        = {Port Blocking},
  institution  = {BITAG},
  year         = {2015},
  month        = feb,
  note         = {Technical report documenting ISP port-blocking practices including TCP/139 and TCP/445},
  url          = {https://www.bitag.org/documents/Port-Blocking.pdf}
}

@Online{msquic,
  author  = {{Microsoft}},
  journal = {Github},
  title   = {MsQuic},
  url     = {https://github.com/microsoft/msquic},
  urldate = {2025-08-26}
}

@Online{fusion,
  author  = {{Tuxera}},
  title   = {Tuxera Fusion SMB},
  url     = {https://www.tuxera.com/products/tuxera-fusion-smb/},
  urldate = {2025-08-26}
}

@Online{data_stream,
  author  = {{Margaret Rouse}},
  title   = {Data Stream},
  url     = {https://www.techopedia.com/definition/6757/data-stream},
  urldate = {2025-08-28}
}

@article{10.1145/1282427.1282421,
author = {Ford, Bryan},
title = {Structured streams: a new transport abstraction},
year = {2007},
issue_date = {October 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/1282427.1282421},
doi = {10.1145/1282427.1282421},
abstract = {Internet applications currently have a choice between stream and datagram transport abstractions. Datagrams efficiently support small transactions and streams are suited for long-running conversations, but neither abstraction adequately supports applications like HTTP that exhibit a mixture of transaction sizes, or applications like FTP and SIP that use multiple transport instances. Structured Stream Transport (SST) enhances the traditional stream abstraction with a hierarchical hereditary structure, allowing applications to create lightweight child streams from any existing stream. Unlike TCP streams, these lightweight streams incur neither 3-way handshaking delays on startup nor TIME-WAIT periods on close. Each stream offers independent data transfer and flow control, allowing different transactions to proceed in parallel without head-of-line blocking, but all streams share one congestion control context. SST supports both reliable and best-effort delivery in a way that semantically unifies datagrams with streams and solves the classic "large datagram" problem, where a datagram's loss probability increases exponentially with fragment count. Finally, an application can prioritize its streams relative to each other and adjust priorities dynamically through out-of-band signaling. A user-space prototype shows that SST is TCP-friendly to within 2\%, and performs comparably to a user-space TCP and to within 10\% of kernel TCP on a WiFi network.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = aug,
pages = {361–372},
numpages = {12},
keywords = {web transport, transport protocols, stream, reliable, multimedia, mobility, fairness, datagram, best-effort, TCP, SST}
}

@inproceedings{sst,
author = {Ford, Bryan},
title = {Structured streams: a new transport abstraction},
year = {2007},
isbn = {9781595937131},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1282380.1282421},
doi = {10.1145/1282380.1282421},
abstract = {Internet applications currently have a choice between stream and datagram transport abstractions. Datagrams efficiently support small transactions and streams are suited for long-running conversations, but neither abstraction adequately supports applications like HTTP that exhibit a mixture of transaction sizes, or applications like FTP and SIP that use multiple transport instances. Structured Stream Transport (SST) enhances the traditional stream abstraction with a hierarchical hereditary structure, allowing applications to create lightweight child streams from any existing stream. Unlike TCP streams, these lightweight streams incur neither 3-way handshaking delays on startup nor TIME-WAIT periods on close. Each stream offers independent data transfer and flow control, allowing different transactions to proceed in parallel without head-of-line blocking, but all streams share one congestion control context. SST supports both reliable and best-effort delivery in a way that semantically unifies datagrams with streams and solves the classic "large datagram" problem, where a datagram's loss probability increases exponentially with fragment count. Finally, an application can prioritize its streams relative to each other and adjust priorities dynamically through out-of-band signaling. A user-space prototype shows that SST is TCP-friendly to within 2\%, and performs comparably to a user-space TCP and to within 10\% of kernel TCP on a WiFi network.},
booktitle = {Proceedings of the 2007 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications},
pages = {361–372},
numpages = {12},
keywords = {web transport, transport protocols, stream, reliable, multimedia, mobility, fairness, datagram, best-effort, TCP, SST},
location = {Kyoto, Japan},
series = {SIGCOMM '07}
}

@misc{rfc9260,
    series =    {Request for Comments},
    number =    9260,
    howpublished =  {RFC 9260},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9260},
    url =       {https://www.rfc-editor.org/info/rfc9260},
    author =    {Randall R. Stewart and Michael Tüxen and karen Nielsen},
    title =     {{Stream Control Transmission Protocol}},
    pagetotal = 133,
    year =      2022,
    month =     jun,
    abstract =  {This document describes the Stream Control Transmission Protocol (SCTP) and obsoletes RFC 4960. It incorporates the specification of the chunk flags registry from RFC 6096 and the specification of the I bit of DATA chunks from RFC 7053. Therefore, RFCs 6096 and 7053 are also obsoleted by this document. In addition, RFCs 4460 and 8540, which describe errata for SCTP, are obsoleted by this document. SCTP was originally designed to transport Public Switched Telephone Network (PSTN) signaling messages over IP networks. It is also suited to be used for other applications, for example, WebRTC. SCTP is a reliable transport protocol operating on top of a connectionless packet network, such as IP. It offers the following services to its users: The design of SCTP includes appropriate congestion avoidance behavior and resistance to flooding and masquerade attacks.},
}

@misc{rfc4960,
    series =    {Request for Comments},
    number =    4960,
    howpublished =  {RFC 4960},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC4960},
    url =       {https://www.rfc-editor.org/info/rfc4960},
    author =    {Randall R. Stewart},
    title =     {{Stream Control Transmission Protocol}},
    pagetotal = 152,
    year =      2007,
    month =     sep,
    abstract =  {This document obsoletes RFC 2960 and RFC 3309. It describes the Stream Control Transmission Protocol (SCTP). SCTP is designed to transport Public Switched Telephone Network (PSTN) signaling messages over IP networks, but is capable of broader applications. SCTP is a reliable transport protocol operating on top of a connectionless packet network such as IP. It offers the following services to its users: -- acknowledged error-free non-duplicated transfer of user data, -- data fragmentation to conform to discovered path MTU size, -- sequenced delivery of user messages within multiple streams, with an option for order-of-arrival delivery of individual user messages, -- optional bundling of multiple user messages into a single SCTP packet, and -- network-level fault tolerance through supporting of multi-homing at either or both ends of an association. The design of SCTP includes appropriate congestion avoidance behavior and resistance to flooding and masquerade attacks. {[}STANDARDS-TRACK{]}},
}

@misc{rfc1945,
    series =    {Request for Comments},
    number =    1945,
    howpublished =  {RFC 1945},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC1945},
    url =       {https://www.rfc-editor.org/info/rfc1945},
    author =    {Henrik Nielsen and Roy T. Fielding and Tim Berners-Lee},
    title =     {{Hypertext Transfer Protocol -- HTTP/1.0}},
    pagetotal = 60,
    year =      1996,
    month =     may,
    abstract =  {The Hypertext Transfer Protocol (HTTP) is an application-level protocol with the lightness and speed necessary for distributed, collaborative, hypermedia information systems. This memo provides information for the Internet community. This memo does not specify an Internet standard of any kind.},
}

@misc{rfc9112,
    series =    {Request for Comments},
    number =    9112,
    howpublished =  {RFC 9112},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9112},
    url =       {https://www.rfc-editor.org/info/rfc9112},
    author =    {Roy T. Fielding and Mark Nottingham and Julian Reschke},
    title =     {{HTTP/1.1}},
    pagetotal = 46,
    year =      2022,
    month =     jun,
    abstract =  {The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document specifies the HTTP/1.1 message syntax, message parsing, connection management, and related security concerns. This document obsoletes portions of RFC 7230.},
}

@misc{rfc2616,
    series =    {Request for Comments},
    number =    2616,
    howpublished =  {RFC 2616},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC2616},
    url =       {https://www.rfc-editor.org/info/rfc2616},
    author =    {Henrik Nielsen and Jeffrey Mogul and Larry M Masinter and Roy T. Fielding and Jim Gettys and Paul J. Leach and Tim Berners-Lee},
    title =     {{Hypertext Transfer Protocol -- HTTP/1.1}},
    pagetotal = 176,
    year =      1999,
    month =     jun,
    abstract =  {HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as "HTTP/1.1", and is an update to RFC 2068. {[}STANDARDS-TRACK{]}},
}

@Online{spdy,
  author  = {{Google}},
  title   = {SPDY: An experimental protocol for a faster web},
  url     = {https://www.chromium.org/spdy/spdy-whitepaper/},
  urldate = {2025-08-29}
}

@misc{rfc7540,
    series =    {Request for Comments},
    number =    7540,
    howpublished =  {RFC 7540},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC7540},
    url =       {https://www.rfc-editor.org/info/rfc7540},
    author =    {Mike Belshe and Roberto Peon and Martin Thomson},
    title =     {{Hypertext Transfer Protocol Version 2 (HTTP/2)}},
    pagetotal = 96,
    year =      2015,
    month =     may,
    abstract =  {This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection. It also introduces unsolicited push of representations from servers to clients. This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax. HTTP's existing semantics remain unchanged.},
}

@misc{rfc7541,
    series =    {Request for Comments},
    number =    7541,
    howpublished =  {RFC 7541},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC7541},
    url =       {https://www.rfc-editor.org/info/rfc7541},
    author =    {Roberto Peon and Herve Ruellan},
    title =     {{HPACK: Header Compression for HTTP/2}},
    pagetotal = 55,
    year =      2015,
    month =     may,
    abstract =  {This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.},
}

@misc{rfc9204,
    series =    {Request for Comments},
    number =    9204,
    howpublished =  {RFC 9204},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9204},
    url =       {https://www.rfc-editor.org/info/rfc9204},
    author =    {Charles 'Buck' Krasic and Mike Bishop and Alan Frindell},
    title =     {{QPACK: Field Compression for HTTP/3}},
    pagetotal = 41,
    year =      2022,
    month =     jun,
    abstract =  {This specification defines QPACK: a compression format for efficiently representing HTTP fields that is to be used in HTTP/3. This is a variation of HPACK compression that seeks to reduce head-of-line blocking.},
}

@misc{rfc6101,
    series =    {Request for Comments},
    number =    6101,
    howpublished =  {RFC 6101},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6101},
    url =       {https://www.rfc-editor.org/info/rfc6101},
    author =    {Alan O. Freier and Philip Karlton and Paul C. Kocher},
    title =     {{The Secure Sockets Layer (SSL) Protocol Version 3.0}},
    pagetotal = 67,
    year =      2011,
    month =     aug,
    abstract =  {This document is published as a historical record of the SSL 3.0 protocol. The original Abstract follows. This document specifies version 3.0 of the Secure Sockets Layer (SSL 3.0) protocol, a security protocol that provides communications privacy over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. This document defines a Historic Document for the Internet community.},
}

@misc{rfc4346,
    series =    {Request for Comments},
    number =    4346,
    howpublished =  {RFC 4346},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC4346},
    url =       {https://www.rfc-editor.org/info/rfc4346},
    author =    {Tim Dierks and Eric Rescorla},
    title =     {{The Transport Layer Security (TLS) Protocol Version 1.1}},
    pagetotal = 87,
    year =      2006,
    month =     apr,
    abstract =  {This document specifies Version 1.1 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications security over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.},
}

@misc{rfc2246,
    series =    {Request for Comments},
    number =    2246,
    howpublished =  {RFC 2246},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC2246},
    url =       {https://www.rfc-editor.org/info/rfc2246},
    author =    {Christopher Allen and Tim Dierks},
    title =     {{The TLS Protocol Version 1.0}},
    pagetotal = 80,
    year =      1999,
    month =     jan,
    abstract =  {This document specifies Version 1.0 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications privacy over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.},
}

@misc{rfc8996,
    series =    {Request for Comments},
    number =    8996,
    howpublished =  {RFC 8996},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8996},
    url =       {https://www.rfc-editor.org/info/rfc8996},
    author =    {Kathleen Moriarty and Stephen Farrell},
    title =     {{Deprecating TLS 1.0 and TLS 1.1}},
    pagetotal = 18,
    year =      2021,
    month =     mar,
    abstract =  {This document formally deprecates Transport Layer Security (TLS) versions 1.0 (RFC 2246) and 1.1 (RFC 4346). Accordingly, those documents have been moved to Historic status. These versions lack support for current and recommended cryptographic algorithms and mechanisms, and various government and industry profiles of applications using TLS now mandate avoiding these old TLS versions. TLS version 1.2 became the recommended version for IETF protocols in 2008 (subsequently being obsoleted by TLS version 1.3 in 2018), providing sufficient time to transition away from older versions. Removing support for older versions from implementations reduces the attack surface, reduces opportunity for misconfiguration, and streamlines library and product maintenance. This document also deprecates Datagram TLS (DTLS) version 1.0 (RFC 4347) but not DTLS version 1.2, and there is no DTLS version 1.1. This document updates many RFCs that normatively refer to TLS version 1.0 or TLS version 1.1, as described herein. This document also updates the best practices for TLS usage in RFC 7525; hence, it is part of BCP 195.},
}

@misc{rfc5246,
    series =    {Request for Comments},
    number =    5246,
    howpublished =  {RFC 5246},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC5246},
    url =       {https://www.rfc-editor.org/info/rfc5246},
    author =    {Eric Rescorla and Tim Dierks},
    title =     {{The Transport Layer Security (TLS) Protocol Version 1.2}},
    pagetotal = 104,
    year =      2008,
    month =     aug,
    abstract =  {This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications security over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. {[}STANDARDS-TRACK{]}},
}

@misc{rfc6176,
    series =    {Request for Comments},
    number =    6176,
    howpublished =  {RFC 6176},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6176},
    url =       {https://www.rfc-editor.org/info/rfc6176},
    author =    {Tim Polk and Sean Turner},
    title =     {{Prohibiting Secure Sockets Layer (SSL) Version 2.0}},
    pagetotal = 4,
    year =      2011,
    month =     mar,
    abstract =  {This document requires that when Transport Layer Security (TLS) clients and servers establish connections, they never negotiate the use of Secure Sockets Layer (SSL) version 2.0. This document updates the backward compatibility sections found in the Transport Layer Security (TLS). {[}STANDARDS-TRACK{]}},
}

@misc{rfc9147,
    series =    {Request for Comments},
    number =    9147,
    howpublished =  {RFC 9147},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC9147},
    url =       {https://www.rfc-editor.org/info/rfc9147},
    author =    {Eric Rescorla and Hannes Tschofenig and Nagendra Modadugu},
    title =     {{The Datagram Transport Layer Security (DTLS) Protocol Version 1.3}},
    pagetotal = 61,
    year =      2022,
    month =     apr,
    abstract =  {This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery. The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol. This document obsoletes RFC 6347.},
}

@BOOK{os_concepts,
  title     = "Operating System Concepts",
  author    = "Silberschatz, Abraham and Galvin, Peter B and Gagne, Greg",
  publisher = "John Wiley \& Sons",
  edition   =  10,
  year      =  2021,
  pages     = {757--769},
}

@misc{rfc7530,
    series =    {Request for Comments},
    number =    7530,
    howpublished =  {RFC 7530},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC7530},
    url =       {https://www.rfc-editor.org/info/rfc7530},
    author =    {Thomas Haynes and David Noveck},
    title =     {{Network File System (NFS) Version 4 Protocol}},
    pagetotal = 323,
    year =      2015,
    month =     mar,
    abstract =  {The Network File System (NFS) version 4 protocol is a distributed file system protocol that builds on the heritage of NFS protocol version 2 (RFC 1094) and version 3 (RFC 1813). Unlike earlier versions, the NFS version 4 protocol supports traditional file access while integrating support for file locking and the MOUNT protocol. In addition, support for strong security (and its negotiation), COMPOUND operations, client caching, and internationalization has been added. Of course, attention has been applied to making NFS version 4 operate well in an Internet environment. This document, together with the companion External Data Representation (XDR) description document, RFC 7531, obsoletes RFC 3530 as the definition of the NFS version 4 protocol.},
}

@Online{samba_myths,
  author  = {{Andrew Tridgell}},
  title   = {Myths About Samba},
  url     = {https://www.samba.org/samba/docs/myths_about_samba.html?ref=cybersecuritycrumbs.cryptopathe.me},
  urldate = {2025-09-02}
}

@inproceedings{nfs_design,
  title={Design and implementation of the Sun network filesystem},
  author={Sandberg, Russel and Goldberg, David and Kleiman, Steve and Walsh, Dan and Lyon, Bob},
  booktitle={Proceedings of the summer 1985 USENIX conference},
  pages={119--130},
  year={1985}
}

@misc{rfc8881,
    series =    {Request for Comments},
    number =    8881,
    howpublished =  {RFC 8881},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8881},
    url =       {https://www.rfc-editor.org/info/rfc8881},
    author =    {David Noveck and Chuck Lever},
    title =     {{Network File System (NFS) Version 4 Minor Version 1 Protocol}},
    pagetotal = 560,
    year =      2020,
    month =     aug,
    abstract =  {This document describes the Network File System (NFS) version 4 minor version 1, including features retained from the base protocol (NFS version 4 minor version 0, which is specified in RFC 7530) and protocol extensions made subsequently. The later minor version has no dependencies on NFS version 4 minor version 0, and is considered a separate protocol. This document obsoletes RFC 5661. It substantially revises the treatment of features relating to multi-server namespace, superseding the description of those features appearing in RFC 5661.},
}

@misc{rfc7530,
    series =    {Request for Comments},
    number =    7530,
    howpublished =  {RFC 7530},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC7530},
    url =       {https://www.rfc-editor.org/info/rfc7530},
    author =    {Thomas Haynes and David Noveck},
    title =     {{Network File System (NFS) Version 4 Protocol}},
    pagetotal = 323,
    year =      2015,
    month =     mar,
    abstract =  {The Network File System (NFS) version 4 protocol is a distributed file system protocol that builds on the heritage of NFS protocol version 2 (RFC 1094) and version 3 (RFC 1813). Unlike earlier versions, the NFS version 4 protocol supports traditional file access while integrating support for file locking and the MOUNT protocol. In addition, support for strong security (and its negotiation), COMPOUND operations, client caching, and internationalization has been added. Of course, attention has been applied to making NFS version 4 operate well in an Internet environment. This document, together with the companion External Data Representation (XDR) description document, RFC 7531, obsoletes RFC 3530 as the definition of the NFS version 4 protocol.},
}

@misc{rfc7862,
    series =    {Request for Comments},
    number =    7862,
    howpublished =  {RFC 7862},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC7862},
    url =       {https://www.rfc-editor.org/info/rfc7862},
    author =    {Thomas Haynes},
    title =     {{Network File System (NFS) Version 4 Minor Version 2 Protocol}},
    pagetotal = 104,
    year =      2016,
    month =     nov,
    abstract =  {This document describes NFS version 4 minor version 2; it describes the protocol extensions made from NFS version 4 minor version 1. Major extensions introduced in NFS version 4 minor version 2 include the following: Server-Side Copy, Application Input/Output (I/O) Advise, Space Reservations, Sparse Files, Application Data Blocks, and Labeled NFS.},
}

@techreport{smb2_tech,
  title        = {Server Message Block (SMB) Protocol Versions 2 and 3},
  institution  = {Microsoft Corporation},
  year         = {2025},
  month        = {July},
  note         = {Release: July 28, 2025. Version v83.0},
  url          = {https://winprotocoldoc.z19.web.core.windows.net/MS-SMB2/%5bMS-SMB2%5d.pdf}
}

@misc{rfc4178,
    series =    {Request for Comments},
    number =    4178,
    howpublished =  {RFC 4178},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC4178},
    url =       {https://www.rfc-editor.org/info/rfc4178},
    author =    {Paul J. Leach and Karthik Jaganathan and Larry Zhu and Wyllys Ingersoll},
    title =     {{The Simple and Protected Generic Security Service Application Program Interface (GSS-API) Negotiation Mechanism}},
    pagetotal = 22,
    year =      2005,
    month =     oct,
    abstract =  {This document specifies a negotiation mechanism for the Generic Security Service Application Program Interface (GSS-API), which is described in RFC 2743. GSS-API peers can use this negotiation mechanism to choose from a common set of security mechanisms. If per-message integrity services are available on the established mechanism context, then the negotiation is protected against an attacker that forces the selection of a mechanism not desired by the peers. This mechanism replaces RFC 2478 in order to fix defects in that specification and to describe how to inter-operate with implementations of that specification that are commonly deployed on the Internet. {[}STANDARDS-TRACK{]}},
}

@misc{rfc4120,
    series =    {Request for Comments},
    number =    4120,
    howpublished =  {RFC 4120},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC4120},
    url =       {https://www.rfc-editor.org/info/rfc4120},
    author =    {Dr. Clifford Neuman and Sam Hartman and Kenneth Raeburn and Taylor Yu},
    title =     {{The Kerberos Network Authentication Service (V5)}},
    pagetotal = 138,
    year =      2005,
    month =     jul,
    abstract =  {This document provides an overview and specification of Version 5 of the Kerberos protocol, and it obsoletes RFC 1510 to clarify aspects of the protocol and its intended use that require more detailed or clearer explanation than was provided in RFC 1510. This document is intended to provide a detailed description of the protocol, suitable for implementation, together with descriptions of the appropriate use of protocol messages and fields within those messages. {[}STANDARDS-TRACK{]}},
}

@techreport{ntlm_tech,
  title        = {NT LAN Manager (NTLM) Authentication Protocol},
  institution  = {Microsoft Corporation},
  year         = {2024},
  month        = {April},
  note         = {Release: April 23, 2024. Version v36.0},
  url          = {https://winprotocoldoc.z19.web.core.windows.net/MS-NLMP/%5bMS-NLMP%5d.pdf}
}

@misc{rfc5040,
    series =    {Request for Comments},
    number =    5040,
    howpublished =  {RFC 5040},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC5040},
    url =       {https://www.rfc-editor.org/info/rfc5040},
    author =    {Renato J. Recio and Paul R. Culley and Dave Garcia and Bernard Metzler and Jeff Hilland},
    title =     {{A Remote Direct Memory Access Protocol Specification}},
    pagetotal = 66,
    year =      2007,
    month =     oct,
    abstract =  {This document defines a Remote Direct Memory Access Protocol (RDMAP) that operates over the Direct Data Placement Protocol (DDP protocol). RDMAP provides read and write services directly to applications and enables data to be transferred directly into Upper Layer Protocol (ULP) Buffers without intermediate data copies. It also enables a kernel bypass implementation. {[}STANDARDS-TRACK{]}},
}

@Online{smb_direct,
  author  = {{Microsoft}},
  title   = {SMB Direct},
  url     = {https://learn.microsoft.com/en-us/windows-server/storage/file-server/smb-direct},
  urldate = {2025-09-05}
}

@Online{smb_quic,
  author  = {{Microsoft}},
  title   = {SMB over QUIC},
  url     = {https://learn.microsoft.com/en-us/windows-server/storage/file-server/smb-over-quic},
  urldate = {2025-09-05}
}

@Online{smb_quic_cac,
  author  = {{Microsoft}},
  title   = {SMB over QUIC},
  url     = {https://learn.microsoft.com/en-us/windows-server/storage/file-server/configure-smb-over-quic-client-access-control},
  urldate = {2025-09-05}
}

@Online{quic_implementations,
  url     = {https://github.com/quicwg/quicwg.github.io/blob/main/implementations.md},
  author  = {{QUIC Working Group}},
  title   = {Implementations and tools},
  urldate = {2025-09-08}
}

@article{quic_perf,
title = {QUIC on the Fast Lane: Extending Performance Evaluations on High-rate Links},
journal = {Computer Communications},
volume = {223},
pages = {90-100},
year = {2024},
issn = {0140-3664},
doi = {https://doi.org/10.1016/j.comcom.2024.04.038},
url = {https://www.sciencedirect.com/science/article/pii/S014036642400166X},
author = {Marcel Kempf and Benedikt Jaeger and Johannes Zirngibl and Kevin Ploch and Georg Carle},
keywords = {QUIC, High-rate links, Performance evaluation, Transport protocols},
}

@Online{quic_linux_kernel,
  url     = {https://github.com/lxin/quic},
  author  = {{Xin Long}},
  title   = {QUIC in Linux Kernel},
  urldate = {2025-09-08}
}

@Online{msquic_docs,
  url     = {https://microsoft.github.io/msquic/msquicdocs/index.html},
  author  = {Microsoft},
  title   = {MsQuic},
  urldate = {2025-09-08}
}

@techreport{banks-quic-performance-00,
    number =    {draft-banks-quic-performance-00},
    type =      {Internet-Draft},
    institution =   {Internet Engineering Task Force},
    publisher = {Internet Engineering Task Force},
    note =      {Work in Progress},
    url =       {https://datatracker.ietf.org/doc/draft-banks-quic-performance/00/},
    author =    {Nick Banks},
    title =     {{QUIC Performance}},
    pagetotal = 8,
    year =      2020,
    month =     dec,
    day =       23,
    abstract =  {The QUIC performance protocol provides a simple, general-purpose protocol for testing the performance characteristics of a QUIC implementation. With this protocol a generic server can support any number of client-driven performance tests and configurations. Standardizing the performance protocol allows for easy comparisons across different QUIC implementations.},
}

@Comment{jabref-meta: databaseType:bibtex;}
